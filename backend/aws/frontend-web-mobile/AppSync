https://github.com/aws-solutions-library-samples/real-time-live-sports-updates-using-aws-appsync # The Real-Time Live Sports Updates Using AWS AppSync solution is designed to help media and entertainment customers to deliver real-time live sports updates to web and mo
bile application via AppSync subscriptions. By leveraging the reference architecture implemented in this solution, M&E companies will be able to deliver sports scores, track live game/match info, send fantasty sports updtates.                                          https://github.com/aws-ia/cfn-ps-salesforce-connect-appsync-rds-postgresql #
https://github.com/aws-samples/aws-amplify-appsync-graphql-real-time-canvas #
https://github.com/aws-samples/appsync-refarch-realtime # AWS AppSync Real-Time Reference Architecture
https://github.com/aws-samples/aws-mobile-appsync-chat-starter-angular # GraphQL starter progressive web application (PWA) with Realtime and Offline functionality using AWS AppSync
https://github.com/aws-samples/aws-serverless-appsync-app # This workshop shows you how to build a Web Application that demonstrates how easy it is to create data driven web applications all with no servers. You will build a serverless web application that lets users
search for popular tourist destinations. The application will use AWS AppSync and the AWS Serverless platform to provide real-time weather analysis of the indexed destinations.                                                                                            https://github.com/aws-samples/aws-appsync-calorie-tracker-workshop # Serverless application that demonstrate how to use AWS AppSync and Amazon Neptune to build a realtime, data driven application.
https://github.com/aws-samples/aws-mobile-appsync-events-starter-ios # GraphQL starter application with Realtime and Offline functionality using AWS AppSync
https://github.com/aws-samples/appsync-chat-app-cdk # AppSync Chat App CDK Backend
https://github.com/aws-samples/aws-appsync-iot-core-realtime-dashboard # This sample application demonstrates a React based web dashboard receiving real-time updates from IoT sensors.  The solution is built with AWS AppSync, AWS Amplify, Amazon Location Service, and A
WS IoT Core technologies.                                                                                                                                                                                                                                                   https://github.com/aws-samples/aws-appsync-iot-core-realtime-example # This sample application demonstrates an iPhone receiving real-time updates from an IoT sensor.  The solution is built with AWS AppSync and AWS IoT Core technologies.
https://github.com/aws-samples/aws-serverless-ecommerce-platform # Serverless Ecommerce Platform is a sample implementation of a serverless backend for an e-commerce website. This sample is not meant to be used as an e-commerce platform as-is, but as an inspiration on
 how to build event-driven serverless microservices on AWS.                                                                                                                                                                                                                 https://github.com/aws-samples/appsync-with-postgraphile-rds # Serverless auto-generated GraphQL API with AWS AppSync and Postgraphile
https://github.com/aws-samples/aws-appsync-resolver-samples #
https://github.com/aws-samples/aws-appsync-presence-api #
https://github.com/aws-samples/recipe-ai # A Next.js sample app utilizing AWS Amplify, AWS AppSync, and Amazon Bedrock to develop an AI-powered Recipe Generator
https://github.com/aws-samples/appsync-bedrock-sample-with-ai-agent #
https://github.com/aws-samples/amazon-chime-sdk-aws-appsync-sample # This sample demonstrates the use of the Chime SDK React components together with an AppSync local resolver implemented with the "None" data source to provide GraphQL mutation driven subscription noti
fications without being backed by a persistent data store. It is a simple video chat React UI built and deployed using the AWS CDK.                                                                                                                                         https://github.com/aws-samples/aws-appsync-multi-region-deployment # This repository contains code written in the AWS Cloud Development Kit (CDK) which launches infrastructure across two different regions to demonstrate using AWS AppSync in a multi-region setup.
https://github.com/aws-samples/aws-amplify-graphql # Sample using AWS Amplify and AWS AppSync together for user login and authorization when making GraphQL queries and mutations. Also includes complex objects for uploading and downloading data to and from S3 with a Re
act app.                                                                                                                                                                                                                                                                    https://github.com/aws-samples/aws-appsync-cwl-migrator # This is a sample package that migrates a given set of requestIds from the AppSync customer logs in CloudWatch, from the current (unstructured) to the new (structured JSON) format.
https://github.com/aws-samples/automating-livestream-video-monitoring # This repo presents a demo application for realtime livestream video quality monitoring using AWS serverless and AI/ML services.
https://github.com/aws-samples/smart-shopping-list # Sample demo that shows how to build an AI powered app using Amplify, AppSync, DynamoDB, Cognito and Rekognition.
https://github.com/aws-samples/aws-lambda-java-appsync-amplify-examples # Invoke AppSync API through Java based Lambda functions generated from AWS Amplify
https://github.com/aws-samples/aws-backup-amplify-appsync # This repository provides an automated solution for adding AWS Backup to AWS Amplify applications that use AWS AppSync with default GraphQL resolvers for DynamoDB tables.
https://github.com/aws-samples/live-streaming-with-media-services-and-appsync #
https://github.com/aws-samples/aws-panorama-shelf-monitoring # This repo linked to AWS Panorama Blog
https://github.com/aws-samples/searchengine-with-appsync-dynamodb-elasticsearch #
https://github.com/aws-samples/appsync-observablehq-examples # Fetch data from AWS AppSync and Amazon Neptune to display in an ObservableHQ embedded notebook in Angular  (React TBD)
https://github.com/aws-samples/aws-appsync-multi-region-active-active #
https://github.com/aws-samples/generative-ai-cdk-constructs-samples # This repo provides sample generative AI stacks built atop the AWS Generative AI CDK Constructs.
https://github.com/aws-samples/chime-sdk-meetings-demo-nextjs-appsync-cognito-cdk # 1on1 call demo using Chime SDK meetings, Next.js, AppSync, and CDK
https://github.com/aws-samples/aws-serverless-fullstack-swift-apple-carplay-example # This application demonstrates a full-stack Apple CarPlay app that uses Swift for both the UI and the backend services in AWS. The app accesses Lambda functions written in Swift and d
eployed from Docker images.  The app accesses Amazon Location Service and a 3rd party weather api to display information in the vicinity of the user.                                                                                                                       https://github.com/aws-samples/aws-appsync-access-amazon-timestream-example #
https://github.com/aws-samples/aws-amplify-stepfunctions-example # Learn how to extend AWS Amplify resources with CDK v2 with this example that deploys a Step Functions workflow triggered via an Amplify-managed AppSync API
https://github.com/aws-samples/aws-sam-transform-aws-appsync # This repository provides an example of using the SAM GraphQL transform to build AWS AppSync APIs
https://github.com/aws-samples/aws-appsync-graphql-fusion-demo #
https://github.com/aws-samples/chime-live-translation-transcription-polly # WebApp Proof of Concept - Live Translation + Polly
https://github.com/aws-samples/aws-appsync-sample-setup #
https://github.com/aws-samples/aws-appsync-with-lake-formation # Application to query a AWS Lake Formation data lake through a AWS AppSync GraphQL API
https://github.com/aws-samples/appsync-similarity-search #
https://github.com/aws-samples/cdk-appsync-pipeline-resolver #
https://github.com/aws-samples/cdk-typescript-appsync-lambda #
https://github.com/aws-samples/aws-apigateway-to-appsync-private-endpoint #
https://github.com/aws-samples/appsync-cloudfront-reverse-proxy #
https://github.com/aws-samples/federated-appsync-api-demo #
https://github.com/aws-samples/aws-appsync-merged-api-ci-cd-sample #
https://github.com/aws-samples/amazon-omics-webapp-integrations # This project contains the webapp sample integrated with AWS HealthOmics, which allows users such as admin and bioinformaticians to operate Amazon Omics workflow easily and check the run command status w
ith charts and tables.                                                                                                                                                                                                                                                      https://github.com/aws-samples/amazon-msk-appsync-datadistribution-blog #
https://github.com/aws-samples/appsync-load-testing-k6 #
https://github.com/aws-samples/generative-ai-newsletter-app # The Generative AI Newsletter Application sample is a ready-to-use serverless solution designed to allow users to create rich newsletters automatically with content summaries that are AI-generated.
https://github.com/aws-samples/amazon-ivs-real-time-collaboration-web-demo # This project demonstrates a video collaboration application powered by Amazon IVS Real-time, serving as a reference for building compelling social video experiences.
https://github.com/aws-samples/rekognition-congestion-monitoring # This is a sample web application for monitoring facility congestion using Amazon Rekognition. Images taken with a webcam are sent to the cloud, and the number of people in the images is calculated base
d on the response of Amazon Rekognition. Using AWS AppSync to notify end users of the number of facilities in real time. The backend of this application is developed by Amplify CLI.                                                                                       https://github.com/awslabs/aws-mobile-appsync-sdk-js # JavaScript library files for Offline, Sync, Sigv4. includes support for React Native
https://github.com/awslabs/aws-mobile-appsync-sdk-ios # iOS SDK for AWS AppSync.
https://github.com/awslabs/aws-mobile-appsync-sdk-android # Android SDK for AWS AppSync.
https://github.com/awslabs/aws-amplify-unicorntrivia-workshop # This is repository contains a self-paced workshop that uses AWS AppSync, AWS Amplify and AWS Elemental Media Services to implement a live streaming trivia system.
https://github.com/awslabs/realtime-fraud-detection-with-gnn-on-dgl # An end-to-end blueprint architecture for real-time fraud detection(leveraging graph database Amazon Neptune) using Amazon SageMaker and Deep Graph Library (DGL) to construct a heterogeneous graph fr
om tabular data and train a Graph Neural Network(GNN) model to detect fraudulent transactions in the IEEE-CIS dataset.                                                                                                                                                      https://github.com/awslabs/generative-ai-cdk-constructs # AWS Generative AI CDK Constructs are sample implementations of AWS CDK for common generative AI patterns.
https://github.com/awslabs/amplify-graphql-seed-plugin # This is an Amplify Plugin which helps your to seed the databases of your Amplify projects with data using an AppSync GraphQL API. It can be used to seed local mock databases, as well as remote databases, e.g. fo
r testing purposes. This plugin allows you to customize and auto-generate mock data, including data with relationships between models.                                                                                                                                      https://github.com/awslabs/aws-dynasync # Create an AWS AppSync GraphQL API and an Amazon DynamoDB database with a single command. Automate the building and provisioning of a GraphQL API using a single config file with AWS AppSync and Amazon DynamoDb to store the data
.                                                                                                                                                                                                                                                                           https://github.com/aws/aws-appsync-community # The AWS AppSync community

