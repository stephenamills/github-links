https://github.com/aws-solutions-library-samples/cfn-ps-dotnetcore-fargate-cicd # 
https://github.com/aws-solutions-library-samples/c2pa-workloads-on-aws # C2PA on AWS Blog

https://github.com/aws-ia/terraform-aws-eks-blueprints # Configure and deploy complete EKS clusters.
https://github.com/aws-ia/terraform-aws-ecs-fargate # AWS ECS Fargate Module
https://github.com/aws-ia/cfn-ps-mongodb-atlas-mean-stack-aws-fargate-integration # 

https://github.com/aws-samples/serverless-jenkins-on-aws-fargate # 
https://github.com/aws-samples/amazon-sagemaker-mlflow-fargate # Managing your machine learning lifecycle with MLflow and Amazon SageMaker
https://github.com/aws-samples/amazon-ecs-fargate-cdk-v2-cicd # Amazon CI/CD pipeline deploying to ECS Fargate using CDK V2
https://github.com/aws-samples/amazon-ecs-fargate-aspnetcore # A prescriptive guidance on how to host an ASP.NET core application in AWS Fargate using Linux containers.
https://github.com/aws-samples/aws-fargate-fast-autoscaler # AWS Fargate Fast Autosaler - A Serverless Implementation that Triggers your Fargate Autoscaling in Seconds
https://github.com/aws-samples/aws-xray-fargate # Code examples showing how to run AWS X-Ray as a sidecar container on Fargate for deep application insights.
https://github.com/aws-samples/amazon-ecs-firelens-examples # Sample logging architectures for FireLens on Amazon ECS and AWS Fargate.
https://github.com/aws-samples/cdk-eks-fargate # 
https://github.com/aws-samples/aws-reinvent-trivia-game # Sample trivia game built with AWS Fargate. See https://www.reinvent-trivia.com
https://github.com/aws-samples/distributed-load-testing-using-aws-fargate # Solution to setup AWS Fargate to run multi-region distributed performance testing.
https://github.com/aws-samples/startup-kit-templates # CloudFormation templates to accelerate getting started on AWS.
https://github.com/aws-samples/ecs-blue-green-deployment # Reference architecture for doing blue green deployments on ECS.
https://github.com/aws-samples/aws-stepfunctions-ecs-fargate-process # 
https://github.com/aws-samples/aws-ecs-cicd-terraform # Build and Deploy Spring Petclinic Application to Amazon ECS (Fargate) using Terraform and AWS CodePipeline
https://github.com/aws-samples/aws-fargate-with-rstudio-open-source # This project delivers AWS CDK Python code to provision serverless infrastructure in AWS Cloud to run Open Source RStudio Server and Shiny.
https://github.com/aws-samples/cdk-fargate-gitlab-runner # 
https://github.com/aws-samples/run-selenium-tests-at-scale-using-ecs-fargate # This article talks about an approach that can help customers run integration and regression tests quicker and cheaper to improve the CI/CD process.
https://github.com/aws-samples/aws-fargate-pipeline-lambda-autoscaling # Fargate autoscaling pipeline for batch processing events from SQS
https://github.com/aws-samples/drupal-on-ecs-fargate # 
https://github.com/aws-samples/aws-copilot-sample-service # Use AWS Copilot to deploy this simple application to Amazon ECS and AWS Fargate. 
https://github.com/aws-samples/amazon-ecs-fargate-workshop-dev-ops-data # Amazon ECS Fargate workshop for developers, operators, and data engineers
https://github.com/aws-samples/aws-fargate-log-aggregator-with-fluentd # A reference architecture for running a Fluentd Log Aggregator on AWS Fargate, which forwards logs to Kinesis Firehose
https://github.com/aws-samples/amazon-kinesis-data-processor-aws-fargate # Sample code for the AWS Big Data Blog Post Building a scalable streaming data processor with Amazon Kinesis Data Streams on AWS Fargate 
https://github.com/aws-samples/amazon-ecs-fargate-consul-connect-example # 
https://github.com/aws-samples/eks-efs-share-within-fargate # 
https://github.com/aws-samples/fargate-game-servers # This repository contains an example solution on how to scale a fleet of game servers on AWS Fargate on Elastic Container Service and route players to game sessions using a Serverless backend. Game Server data is st
ored in ElastiCache Redis. All resources are deployed with Infrastructure as Code using CloudFormation, Serverless Application Model, Docker and bash/powershell scripts. By leveraging AWS Fargate for your game servers you don't need to manage the underlying virtual machines.                                                                                                                                                                                                                                                                     https://github.com/aws-samples/aws-quarkus-demo # Quarkus example projects for Amazon ECS and Amazon EKS with AWS Fargate and AWS Lambda
https://github.com/aws-samples/aws-mlflow-sagemaker-cdk # MLflow on AWS Fargate integrated with Amazon SageMaker. 
https://github.com/aws-samples/sqs-fargate-ddb-cdk-go # 
https://github.com/aws-samples/ipfs-cluster-fargate # 
https://github.com/aws-samples/ecs-fargate-drain-function # 
https://github.com/aws-samples/http-api-aws-fargate-cdk # Build HTTP API Based Services using Amazon API Gateway, AWS PrivateLink, AWS Fargate and AWS CDK
https://github.com/aws-samples/retail-demo-store # AWS Retail Demo Store is a sample retail web application and workshop platform demonstrating how AWS infrastructure and services can be used to build compelling customer experiences for eCommerce, retail, and digital 
marketing use-cases                                                                                                                                                                                                                                                         https://github.com/aws-samples/containers-fargateprofile-devops-via-codepipeline # 
https://github.com/aws-samples/aws-copilot-fargate # 
https://github.com/aws-samples/twelve-factor-app-ecs-blog # This GitHub repository hosts the artifacts for the AWS Containers blog on developing Twelve Factor Apps on ECS using Fargate.
https://github.com/aws-samples/fargate-reverse-proxy-with-static-ips # 
https://github.com/aws-samples/designing-cloud-native-microservices-on-aws # Introduce a fluent way to design cloud native microservices via EventStorming workshop, this is a hands-on workshop. Contains such topics: DDD, Event storming, Specification by example. Inclu
ding the AWS product : Serverless Lambda , DynamoDB, Fargate, CloudWatch.                                                                                                                                                                                                   https://github.com/aws-samples/java-spring-boot-ecs-fargate-redis-caching # 
https://github.com/aws-samples/pizza-delivery-tracker # Pizza Delivery Tracker using AWS Amplify, Amazon Location Service, AWS AppRunner, and AWS Fargate.
https://github.com/aws-samples/aws-stepfunctions-eks-fargate-process # 
https://github.com/aws-samples/fargate-serverless-platform-operator-kit # Serverless Platform Operator Kit (SPOK)
https://github.com/aws-samples/aws-tf-prowler-fargate # Terraform module to perform security assessment in AWS Organizations using Prowler on AWS Fargate.
https://github.com/aws-samples/amazon-ecs-for-beginners-catsdogs # [한국어/English]This workshop is designed to educate engineers that might not be familiar with Amazon ECS, Fargate, and possibly even Docker container workflow. It covers Amazon ECS fundamentals and ne
w features including Cluster Auto Scaling, CloudWatch Container Insights, AWS FireLens and so on.                                                                                                                                                                           https://github.com/aws-samples/aws-codepipeline-docker-vulnerability-scan # CloudFormation Templates to deploy CoreOS Clair and Nginx Website on ECS Fargate as an ECS Service. Also create a CodePipeline for updating the Nginx ECS service on code change.
https://github.com/aws-samples/ssr-micro-frontends # This is an SSR and micro-frontends example using AWS services such as Lambda functions, Step Functions and Fargate
https://github.com/aws-samples/fargate-efs-cloudformation-deployment-example # Automating Amazon EFS file systems mounts for AWS Fargate
https://github.com/aws-samples/amazon-efs-integrations # Amazon EFS Integrations
https://github.com/aws-samples/deploy-langfuse-on-ecs-with-fargate # Hosting Langfuse on Amazon ECS with Fargate using CDK Python
https://github.com/aws-samples/amazon-ecr-privatelink-blog # Source code for Private Link ECR cross account Fargate Deployment
https://github.com/aws-samples/aws-fargate-seekable-oci-toolbox # 
https://github.com/aws-samples/amazon-ecs-mythicalmysfits-workshop # A tutorial for developers who want to learn about how to containerized applications on top of AWS using AWS Fargate. You will build a sample website that leverages infrastructure as code, containers,
 CI/CD, and more! If you're planning on running this, let us know @ aws-mythical-mysfits@amazon.com. At re:Invent 2018, these sessions were run as CON214/CON321/CON322.                                                                                                    https://github.com/aws-samples/eks-fargate-example # 
https://github.com/aws-samples/aws-jenkins-ecs-cdk # Build and Deploy Jenkins as code to ECS Fargate using AWS CDK.
https://github.com/aws-samples/aws-codedeploy-linear-canary-deployments-blog # AWS CodeDeploy has extended blue/green deployment support for Elastic Container Service (Amazon ECS) to include canary and linear deployments for applications hosted on AWS Fargate or Amazo
n Compute Cloud (Amazon EC2).                                                                                                                                                                                                                                               https://github.com/aws-samples/aws-fargate-outbound-connector-transfer-family # 
https://github.com/aws-samples/aws-sagemaker-fargate-dask # 
https://github.com/aws-samples/research-pacs-on-aws # The Research PACS on AWS solution facilitates researchers' access medical images stored in the clinical PACS in a secure and seamless manner
https://github.com/aws-samples/amazon-kinesis-eks-fargate-consumer # 
https://github.com/aws-samples/cdk-pipelines-ecs-cross-account # This repository shows how to use CDK Pipelines to create a cross-account CI/CD pipeline for Amazon Elastic Container Service (ECS)
https://github.com/aws-samples/k6-fargate-cloudwatch-with-cdk # This sample project provides an easy way to run load test with a K6 container in an ECS Fargate Task. The metrics are collected by the CloudWatch Agent sidecar in the Fargate Task. This project also provi
des a CloudWatch Dashboard to view the load testing result in the CloudWatch.                                                                                                                                                                                               https://github.com/aws-samples/aws-fargate-falco-examples # 
https://github.com/aws-samples/aws-copilot-cli-streamlit # Rapidly deploy a Machine Learning ML service on Amazon Web Services (AWS) Cloud, using AWS Farget and Streamlit
https://github.com/aws-samples/tweet-classification # Tweet classification for real-time alerts with Amazon SageMaker and Hugging Face
https://github.com/aws-samples/aws-cdk-localgov-drupal-fargate-efs-auroraserverlessv2 # 
https://github.com/aws-samples/aws-fargate-server-sent-events-sse-amazon-kinesis-data-streams # When dealing with real-time data it is often required to send that data over the internet to various sources. Various technologies have enabled this such as web sockets and
 long polling. Recently server-sent events (SSE) has become a popular technology to push updates to clients. Ingesting this type of data source into AWS requires a client to be running continuously to receive those events. This sample shows how to connect to an SSE endpoint using AWS Fargate. This sample creates a docker image with a simple SSE client which publishes to an Amazon Kinesis Data Streams stream, then we simply store the event data in Amazon S3.                                                                           https://github.com/aws-samples/amazon-msk-java-app-cdk # This project provides and example of end to end data processing application created using the combination of Amazon Managed Streaming for Apache Kafka (Amazon MSK), AWS Fargate, AWS Lambda and Amazon DynamoDB. B
usiness logic is implemented in Java and Typescript. The build and deployment of the application is fully automated using AWS CDK.                                                                                                                                          https://github.com/aws-samples/eks-fargate-aquasec # 
https://github.com/aws-samples/aws-ecs-springboot-opentelemetry-sample # SpringBoot integration with AWS Distro for OpenTelemetry on Amazon ECS
https://github.com/aws-samples/amazon-sagemaker-xgboost-regression-model-hosting-on-amazon-ecs-fargate-and-amazon-api-gateway # How to train a XGBoost regression model on Amazon SageMaker, host inference on a Docker container running on Amazon ECS on AWS Fargate and o
ptionally expose as an API with Amazon API Gateway.                                                                                                                                                                                                                         https://github.com/aws-samples/fargate-ses-relay # 
https://github.com/aws-samples/cdk-fargate-bulkload-dynamodb # 
https://github.com/aws-samples/aws-autonomous-driving-data-lake-ros-bag-visualization-using-webviz # Sample application to deploy Webviz to ECS Fargate and use it to visualize ROS Bag files streamed from S3
https://github.com/aws-samples/aws-do-docker # AWS DevOps for Docker - a sample project to help you build Docker containers and run them on AWS. In addition to running locally,  this project can run your container on EC2, ECS, EKS, AWS Batch, and AWS Lambda.
https://github.com/aws-samples/bcs-disaster-recovery-portal-dynamodb-stream # This package contains AWS Fargate task to manage and process Amazon DynamoDB stream.
https://github.com/aws-samples/amazon-ecs-fargate-clock-accuracy # 
https://github.com/aws-samples/aws-wickr-data-retention-on-fargate # Sample CloudFormation code to install an AWS Wickr Data Retention bot on AWS Fargate
https://github.com/aws-samples/ecs-blue-green-global-deployment-with-multiregion-cmk-codepipeline # Global Blue/Green deployments in multiple regions and accounts for ECS Fargate using AWS Codepipeline and Cloudformation
https://github.com/aws-samples/ai-powered-text-insights # 
https://github.com/aws-samples/waitcondition-hook-for-aws-fargate-task # 
https://github.com/aws-samples/aws-cdk-sample-devsecops-ecs-fargate # Sample CDK script to build DevSecOps pipeline for AWS ECS Fargate using open source tools.
https://github.com/aws-samples/capturing-aws-fargate-task-retirement-notifications # 
https://github.com/aws-samples/amazon-ecs-fargate-nlb-external-deployment-with-scaledown # 
https://github.com/aws-samples/cloudformation-transfer-family-efs-ecs-example # Example project to integrate Amazon ECS, Amazon EFS and AWS Transfer Family
https://github.com/aws-samples/amazon-codeguru-reviewer-github-actions-shift-left-example # This is a repository that contains a technical deep dive demo for the Amazon CodeGuru Reviewer with GitHub Actions, and Amazon CodeGuru Profiler with Java and Python on AWS Lambda and AWS Fargate. 
https://github.com/aws/containers-roadmap # This is the public roadmap for AWS container services (ECS, ECR, Fargate, and EKS). 
https://github.com/aws/amazon-ecs-cli # The Amazon ECS CLI enables users to run their applications on ECS/Fargate using the Docker Compose file format, quickly provision resources, push/pull images in ECR, and monitor running applications on ECS/Fargate.
https://github.com/aws/copilot-cli # The AWS Copilot CLI is a tool for developers to build, release and operate production ready containerized applications on AWS App Runner or Amazon ECS on AWS Fargate. 
https://github.com/aws/shim-loggers-for-containerd # Shim logger repository for streaming container logs when using Containerd

